Typical command examples

ld %0, r3
  ld - load an argument to the registry (opcode - 2), codage = 2
  %0 - argument, direct value 0
  r3 - third registry

sti r15,%0,r14
  sti - store index by taking two indexes, adding them, and using as an address
    where to copy the value from the first registry

What is considered a valid string:
  1. comment (e.g. #hello)
  2. blank line
  3. line containing only space characters
  4. name/comment containing any character possible (.name: "привет")
  5. any amount of spaces between SEPARATOR_CHAR (,)
  6. any amount of spaces between a command name and registers

What is bad:
  1. Opening brackets of name or comment without a closing one
  2. space between DIRECT_CHAR (%) or before LABEL_CHAR (:)
  3. another instruction in the same line

What is wrong:
	segfault: put `"` on line 7 of Gagnant.s.
	reason: hell if I know

Direct values can appear whenever they want, but not before name/comment section:
```
 1
 42424
 %42
```
is a valid piece of assembly

Token types:
  INSTRUCTION - token that contains at least one letter
    e.g. 42_i_am_instruction, ___instruction__
  STRING - anything that starts and ends with double-quotes(e.g. "hi\nthere\n")
  INDIRECT - a value (e.g. 42, 0)
  DIRECT - a value that starts with DIRECT_CHAR (e.g. %42)
  DIRECT_LABEL - a label that starts with a DIRECT_CHAR (e.g. %:label)
  INDIRECT_LABEL - token that starts with LABEL_CHAR
    e.g. :42label, but not :"oops"
  LABEL - token that ends with a LABEL_CHAR (e.g. label:)
  REGISTER - token consists of 'r' and two digits after it (e.g. r99)
  SEPARATOR - ','

Lexical error is thus when the syntax of a sertain type of token is violated.
For example, `% 42` contains a lexical error because DIRECT token cannot contain spaces.

All token-cutting routines should perform the following operations:
  1) Create a token.
  2) Move pointer to token start (int *start argument) to the end of the token.
  3) Validate token lexicographically.

If "memory was not allocated" error shows up while releasing string associated
with t_tk token, this is likely due to the fact that `ft_strtrunc()` haven't
allocated memory for it, but passed it as-is. This can cause very intricate bugs
later, especially when releasing memory associated with the list of lines and tokens.

Token of type INSTRUCTION must have at least one argument after it.
Arguments are 0-indexed.

Token types that can serve as parameters for instructions:
- DIRECT
- DIRECT_LABEL
- INDIRECT
- INDIRECT_LABEL
- REGISTER